[project]
name = "third-party-integration-mcp"
version = "1.0.0"
description = "Third Party Integration MCP to GitHub"
authors = [
    {name = "MCP Team", email = "team@mcp.dev"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.10"
keywords = ["mcp", "authentication", "rbac", "enterprise", "security"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Systems Administration :: Authentication/Directory",
]

dependencies = [
    # Core MCP and FastAPI dependencies and streamlit
    "fastmcp>=2.0.0",
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.32.0",
    "websockets<12.0",
    "pydantic>=2.0.0",
    # Authentication and JWT
    "PyJWT>=2.8.0",
    "cryptography>=41.0.0",
    "requests>=2.31.0",
    # Configuration and utilities
    "python-dotenv>=1.0.0",
    "pyyaml>=6.0.1",
    # Security and monitoring
    "bcrypt>=4.0.0",
    "python-multipart>=0.0.6",
    "rich>=14.1.0",
    "httpx>=0.28.1",
    # Streamlit and extra components
    "streamlit>=1.50.0",
    "extra-streamlit-components>=0.1.81",
    "python-dotenv"
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.5.0",
    "pre-commit>=3.4.0",
]

test = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "httpx>=0.25.0",
]

docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.4.0",
    "mkdocstrings[python]>=0.23.0",
]

[project.urls]
Homepage = "https://github.com/mcp/internal-system"
Documentation = "https://mcp.dev/tutorials/internal-system"
Repository = "https://github.com/mcp/internal-system.git"
Issues = "https://github.com/mcp/internal-system/issues"

[project.scripts]
internal-rbac-proxy = "rbac_proxy:main"
internal-mcp-server = "mcp_server:main"
internal-setup = "setup:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["libs"]

[tool.black]
line-length = 88
target-version = ['py310']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
target-version = "py310"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.mypy]
python_version = "3.10"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true

[[tool.mypy.overrides]]
module = [
    "mcp.*",
    "pymongo.*",
    "psycopg2.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers"
testpaths = ["tests"]
pythonpath = ["."]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["libs", "rbac_proxy", "mcp_server"]
omit = [
    "tests/*",
    "examples/*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
]
